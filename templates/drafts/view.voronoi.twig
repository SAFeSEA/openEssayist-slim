{% extends "site.twig" %} 

{% block title %}Draft - Sentence Network (Voronoi D3.js){% endblock %} 
{% block subheader %}Draft - Sentence Network (Voronoi D3.js){% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}


{% block content %}

<div class="row-fluid"><div class="span12">

<div class="widget">
			<div class="widget-header" data-toggle="collapse" data-target="#demo">
				<h2>Graph</h2>
		
			</div>
			<div class="widget-content" id='svg-container'></div>
			</div>
</div></div>

{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/d3.js/d3.v3.min.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script type="text/javascript">

var width = 960,
height = 500;
	
d3.json('{{ urlFor('ajax.graph.json',{'draft':draft.id,'graph':'graphse'}) }}', function(err, data) {


    data.nodes.forEach(function(d, i) {
      //  d.id = i;
      	
    });

	function name(d) { return d.name; }
	function group(d) { return d.group; }

	var color = d3.scale.category10();
	function colorByGroup(d) { return color(group(d)); }


	var svg = d3.select('#svg-container')
	    .append('svg')
	    .attr('width', width)
	    .attr('height', height);

	var node, link;

	var voronoi = d3.geom.voronoi()
	    .x(function(d) { return d.x; })
	    .y(function(d) { return d.y; })
	    .clipExtent([[-10, -10], [width+10, height+10]]);

	function recenterVoronoi(nodes) {
	    var shapes = [];
	    voronoi(nodes).forEach(function(d) {
	        if ( !d.length ) return;
	        var n = [];
	        d.forEach(function(c){
	            n.push([ c[0] - d.point.x, c[1] - d.point.y ]);
	        });
	        n.point = d.point;
	        shapes.push(n);
	    });
	    return shapes;
	}

	var force = d3.layout.force()
	    .charge(-2000)
	    .friction(0.003)
	    .linkDistance(250)
	    .size([width, height]);

	force.on('tick', function() {
	    node.attr('transform', function(d) { return 'translate('+d.x+','+d.y+')'; })
	        .attr('clip-path', function(d) { return 'url(#clip-'+d.index+')'; });

	    link.attr('x1', function(d) { return d.source.x; })
	        .attr('y1', function(d) { return d.source.y; })
	        .attr('x2', function(d) { return d.target.x; })
	        .attr('y2', function(d) { return d.target.y; });

	    var clip = svg.selectAll('.clip')
	        .data( recenterVoronoi(node.data()), function(d) { return d.point.index; } );

	    clip.enter().append('clipPath')
	        .attr('id', function(d) { return 'clip-'+d.point.index; })
	        .attr('class', 'clip');
	    clip.exit().remove()

	    clip.selectAll('path').remove();
	    clip.append('path')
	        .attr('d', function(d) { return 'M'+d.join(',')+'Z'; });
	});

	


	    link = svg.selectAll('.link')
	        .data( data.links )
	      .enter().append('line')
	        .attr('class', 'link')
	        .style("stroke-width", function(d) { return Math.sqrt(d.value); });

	    node = svg.selectAll('.node')
	        .data( data.nodes )
	      .enter().append('g')
	        .attr('title', name)
	        .attr('class', 'node')
	        .call( force.drag );

	    node.append('circle')
	        .attr('r', 30)
	        .attr('fill', colorByGroup)
	        .attr('fill-opacity', 0.5);

	    node.append('circle')
	        .attr('r', 4)
	        .attr('stroke', 'black');

	    force
	        .nodes( data.nodes )
	        .links( data.links )
	        .start();

	    
	
    
});






    </script>
{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style type="text/css">

.link {
  stroke: #999;
  /*stroke-opacity: .1;*/
  stroke-width: 1.5px;
}

path.link {
  fill: none;
  stroke: #999;
  stroke-width: 1.5px;
}

marker#licensing {
  fill: green;
}

path.link.licensing {
  stroke: green;
}

path.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  /*fill: #ccc;*/
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
}

text.shadow {
  stroke: #fff;
  stroke-width: 3px;
  stroke-opacity: .8;
}

    </style>
{% endblock %}