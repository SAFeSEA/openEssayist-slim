{% extends "site.twig" %} 

{% block title %}Draft - Sentence Network (D3.js){% endblock %} 
{% block subheader %}Draft - Sentence Network (D3.js){% endblock %} 


{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}


{% block content %}

<div class="row-fluid"><div class="span12">

<div class="widget">
			<div class="widget-header" data-toggle="collapse" data-target="#demo">
				<h2>Graph</h2>
		
			</div>
			<div class="widget-content" id='svg-container' style="height: 600px;"></div>
			</div>
</div></div>

{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/d3.js/d3.v3.min.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script type="text/javascript">
$(document).ready(function()
{
	// load graph JSON data
	var url = "{{ urlFor('ajax.graph.json',{'draft':draft.id,'graph':'graphse'}) }}";
	d3.json(url,setupGraph);
});

function setupGraph(err, data)
{
	var w = 960,
    	h = 500;

	w = $('#svg-container').width();
	h = $('#svg-container').height();
	
	data.nodes.forEach(function(d, i) {
        d.key = i;
        d.x= Math.random() * w;
        d.y= Math.random() * h; 
    });


    var nodes = data.nodes;
    var links = data.links;
    var maxn = nodes.length;

    var n = data.nodes.length;
	var colordd = d3.scale.linear()
			.domain([0,n/2,n])
		    .range(["#d7191c", "#ffffbf", "#2c7bb6"])
  		    //.domain([0,n])
			//.range(["hsl(62,100%,90%)", "hsl(228,30%,20%)"]);
			.interpolate(d3.interpolateHcl);
    

 
    var force = d3.layout.force()
        .nodes(nodes)
        .links(links)
        .size([w, h])
        .gravity(0.8)
        .friction(0.2)
    		.charge(-50)
    		.linkDistance( 250 )
        .on("tick", tick)
        .start()
        ;


        
    
    
    var svg = d3.select("#svg-container").append("svg:svg")
    .attr({
        "width": "100%",
        "height": "100%"
      })
      .attr("viewBox", "0 0 " + w + " " + h )
      .attr("preserveAspectRatio", "xMidYMid meet")
      .attr("pointer-events", "all")
    	//.call(d3.behavior.zoom().on("zoom", redraw))
    	;

  


var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
  .enter().append("svg:path")
    .attr("class", function(d) { return "link " + d.type; })
      .style("stroke-opacity", function(d) { return 0.1; })
      .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

   
var circle = svg.append("svg:g").selectAll("circle")
    .data(force.nodes())
  .enter().append("svg:circle")
  	.style("fill",function(d,n) {  return colordd(d.index); })
  	.style("stroke-width", function(d) { return (d.rank) ? 1.5 : 0.1; })
  	.style("stroke", function(d) { return (d.rank) ? d3.rgb(ramp(d.index)).darker(1) : null; })
  	.attr("r", 10)
    .call(force.drag);

var text = svg.append("svg:g").selectAll("g")
    .data(force.nodes())
  .enter().append("svg:g");

// A copy of the text with a thick white stroke for legibility.
text.append("svg:text")
    .attr("x", 8)
    .attr("y", ".31em")
    .attr("class", "shadow")
    .text(function(d) { return d.id; });

text.append("svg:text")
    .attr("x",8)
    .attr("y", ".31em")
    .text(function(d) { return d.id; });



	//Use elliptical arc path segments to doubly-encode directionality.
	function tick() {
  		path.attr("d", function(d) {
    		var dx = d.target.x - d.source.x,
        		dy = d.target.y - d.source.y,
        		dr = Math.sqrt(dx * dx + dy * dy);
    		return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
  		});

  		circle.attr("transform", function(d) {
    		return "translate(" + d.x + "," + d.y + ")";
  		});

  		text.attr("transform", function(d) {
    		return "translate(" + d.x + "," + d.y + ")";
  		});
	}

	function redraw() {
		  svg.attr("transform",
		      "translate(" + d3.event.translate + ")"
		      + " scale(" + d3.event.scale + ")");
		}

	$("#svg-container").dblclick(function() {
		force.stop();
	});
};






    </script>
{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style type="text/css">

.link {
  stroke: #999;
  /*stroke-opacity: .1;*/
  stroke-width: 1.5px;
}

path.link {
  fill: none;
  stroke: #999;
  stroke-width: 1.5px;
}

marker#licensing {
  fill: green;
}

path.link.licensing {
  stroke: green;
}

path.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  /*fill: #ccc;*/
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
}

text.shadow {
  stroke: #fff;
  stroke-width: 3px;
  stroke-opacity: .8;
}

    </style>
{% endblock %}