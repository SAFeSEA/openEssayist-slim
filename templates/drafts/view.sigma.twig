{% extends "site.twig" %} 

{% block title %}Draft - Sentence Network (SigmaJS){% endblock %} 
{% block subheader %}Draft - Sentence Network (SigmaJS){% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.cytoscape'} %}
{% endblock %}

{% block content %}

<div class="row-fluid"><div class="span12">

<div class="widget">
			<div class="widget-header" data-toggle="collapse" data-target="#demo">
				<h2>Sentence Graph</h2>
			</div>
			<div class="widget-content sigma-parent" id='mynetwork'>
		
				<div class="sigma-expand" id="sigma-example"></div>
   			 
   			 </div>
			<p id="selection"></p>
			</div>
</div></div>

{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/d3.js/d3.v3.min.js"></script>
	
<script src="{{ app_base }}/assets/sigma.js/sigma.min.js"></script>
<script src="{{ app_base }}/assets/sigma.js/plugins/sigma.forceatlas2.js"></script>
<script type="text/javascript">

$(document).ready(function(){

	
	// Instanciate sigma.js and customize rendering :
	var sigInst = sigma.init(document.getElementById('sigma-example'))
		.drawingProperties({
			defaultLabelColor: '#fff',
		    defaultLabelSize: 14,
		    defaultLabelBGColor: '#fff',
		    defaultLabelHoverColor: '#000',
		    labelThreshold: 6,
		    defaultEdgeType: 'curve'
		 }).graphProperties({
		    minNodeSize: 8,
		    maxNodeSize: 10,
		    minEdgeSize: 1,
		    maxEdgeSize: 1
		 }).mouseProperties({
		    maxRatio: 5
	});

	$.getJSON("{{ urlFor('ajax.graph.json',{'draft':draft.id,'graph':'graphse'}) }}", 
		function( data ) {
			var n = data.nodes.length;
		var color = d3.scale.linear()
	    .domain([0,n/2,n])
	    .range(["#d7191c", "#ffffbf", "#2c7bb6"])
	    //.domain([0,n])
	    //.range(["hsl(62,100%,90%)", "hsl(228,30%,20%)"]);
	    .interpolate(d3.interpolateHcl);
		console.log(color(0));
			
		
		//console.log(data.nodes);
		$.each( data.nodes, function( key, val ) {
			console.log(key);
			sigInst.addNode(val.id,{
				  label: String(val.id),
				  'x': Math.random(),
			      'y': Math.random(),
				  color: color(key),
			});
		});
		$.each( data.links, function( key, val ) {
			sigInst.addEdge(key,
					data.nodes[val.source].id,
					data.nodes[val.target].id,
					{
						color: "grey",
					});
		});
		
		//sigInst.draw();
		sigInst.startForceAtlas2();
		var isRunning = true;

		$('#sigma-example').dblclick(function(){
			if(isRunning)
			{
				sigInst.stopForceAtlas2();
				isRunning = false;
			}
			else
			{
				sigInst.startForceAtlas2();
				isRunning = true;
			}
		});
	});

		
});
</script>
{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style type="text/css">

	/* sigma.js context : */
  .sigma-parent {
    position: relative;
    border-radius: 4px;
    -moz-border-radius: 4px;
    -webkit-border-radius: 4px;
    background: white;
    height: 500px;
  }
  .sigma-expand {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }
  .buttons-container{
    padding-bottom: 8px;
    padding-top: 12px;
  }
	
</style>
{% endblock %}